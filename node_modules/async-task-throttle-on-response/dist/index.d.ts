export declare type ITask<R = any> = (...args: any[]) => Promise<R>;
export interface IAsyncTaskOptions {
    args: any[];
    resolve: (value?: unknown) => void;
    reject: (reason?: any) => void;
}
export default class AsyncTaskThrottle<S extends ITask> {
    static create<T extends ITask>(task: T, rateLimitCount?: number, rateLimitDuration?: number, max?: number): T;
    private _queue;
    private _queueLength;
    private _workerCount;
    private _task;
    private _workingCount;
    private _workingCountProcessing;
    private _rateLimitDuration;
    constructor(task: S, rateLimitCount?: number, rateLimitDuration?: number, queueLength?: number);
    getWorkingCount(): number;
    create(): S;
    push(options: IAsyncTaskOptions): void;
    private work;
}
