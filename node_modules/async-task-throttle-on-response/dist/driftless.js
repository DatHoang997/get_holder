"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var present_1 = __importDefault(require("present"));
exports.DEFAULT_THRESHOLD_MS = 1;
exports.DEFAULT_AGGRESSION = 1.1;
exports.DEFAULT_NOW_FN = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return present_1.default.apply(void 0, args);
};
exports.DEFAULT_SET_TIMEOUT = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return setTimeout.apply(void 0, args);
};
exports.DEFAULT_CLEAR_TIMEOUT = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return clearTimeout.apply(void 0, args);
};
var timerHandles = {};
var nextId = 0;
function tryDriftless(id, opts) {
    var _this = this;
    var atMs = opts.atMs, fn = opts.fn, _a = opts.thresholdMs, thresholdMs = _a === void 0 ? exports.DEFAULT_THRESHOLD_MS : _a, _b = opts.aggression, aggression = _b === void 0 ? exports.DEFAULT_AGGRESSION : _b, _c = opts.customNow, customNow = _c === void 0 ? exports.DEFAULT_NOW_FN : _c, _d = opts.customSetTimeout, customSetTimeout = _d === void 0 ? exports.DEFAULT_SET_TIMEOUT : _d;
    var delayMs = atMs - customNow();
    var handle = delayMs > thresholdMs
        ? customSetTimeout(function () {
            tryDriftless.apply(_this, arguments); // eslint-disable-line prefer-rest-params
        }, delayMs / aggression)
        : customSetTimeout(function () {
            // Call the function using setTimeout to ensure asynchrony
            fn();
        }, 0);
    timerHandles[id] = handle;
}
function setDriftless() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return setDriftless.setDriftlessSpyable.apply(setDriftless, args);
}
exports.setDriftless = setDriftless;
// Separate function for testing
setDriftless.setDriftlessSpyable = function (opts) {
    var id = nextId;
    nextId += 1;
    tryDriftless(id, opts);
    return id;
};
function clearDriftless(id, opts) {
    if (opts === void 0) { opts = {}; }
    var _a = opts.customClearTimeout, customClearTimeout = _a === void 0 ? exports.DEFAULT_CLEAR_TIMEOUT : _a;
    customClearTimeout(timerHandles[id]);
}
exports.clearDriftless = clearDriftless;
function castToFn(fn) {
    return typeof fn === 'function' ? fn : new Function(fn); // eslint-disable-line no-new-func
}
function setDriftlessTimeout(fn, delayMs) {
    var params = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        params[_i - 2] = arguments[_i];
    }
    var callFn = castToFn(fn);
    return setDriftless({
        atMs: exports.DEFAULT_NOW_FN() + delayMs,
        fn: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return callFn.call.apply(callFn, [this].concat(args, params));
        },
    });
}
exports.setDriftlessTimeout = setDriftlessTimeout;
function setDriftlessInterval(fn, delayMs) {
    var params = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        params[_i - 2] = arguments[_i];
    }
    var callFn = castToFn(fn);
    var id;
    var opts = {
        atMs: exports.DEFAULT_NOW_FN() + delayMs,
        fn: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            opts.atMs += delayMs;
            tryDriftless(id, opts);
            return callFn.call.apply(callFn, [this].concat(args, params));
        },
    };
    id = setDriftless(opts);
    return id;
}
exports.setDriftlessInterval = setDriftlessInterval;
